
Τρόπος Διεκπεραίωσης Εργασιών και Αιτημάτων
=============================================

Στο κείμενο αυτό περιγράφεται ο τρόπος με τον οποίο
διεκπεραιώνονται οι εργασίες και τα αιτήματα που σχετίζονται
με τη Διαχείριση Συστημάτων Η/Υ στο Τμήμα Μαθηματικων και Εφαρμοσμένων Μαθηματικών.


Βασικές Αρχές και Υποθέσεις:

  #. Όλες οι εργασίες γίνονται απαρέγκλιτα εντός του ωραρίου εργασίας.
  #. Εργασίες εκτός ωραρίου μπορούν να γίνονται μόνο στο πλαίσιο που ορίζεται από την εργασιακή νομοθεσία (υπερωρίες κλπ).
  #. Υποθέτουμε ότι υπάρχει ισχυρή ανθρώπινη διάθεση για "γίνει η δουλειά στην ώρα της", δηλαδή να λειτουργήσει ο οργανισμός.
  #. Η καταγραφή μιας εργασίας είναι **τουλάχιστον** το ίδιο σημαντική με την υλοποίηση της εργασίας. Μια μη καταγεγραμμένη εργασία είναι χαμένη εργασία. Η καταγραφή μιας εργασίας που δεν έγινε, μπορεί να βοηθήσει και να επιταχύνει πολλές άλλες παρόμοιες εργασίες.
  #. Τα **επείγοντα** (βλ. παρακάτω) μπαίνουν σε άμεση προτεραιότητα, κατ' εξαίρεση οποιασδήποτε διαδικασίας. **Αυτό δεν τα εξαιρεί από την καταγραφή**· τουναντίον.
  #. Τα **επείγοντα έχουν μηδενική πιθανότητα**, αλλιώς κάτι δεν πάει καλά στη λειτουργία του οργανισμού. Δηλαδή, η συχνότητα των επειγόντων πρέπει να είναι **σχεδόν ποτέ**, διαφορετικά κάνουμε κάτι *πολύ λάθος*.
  #. Εκεί που χωλαίνει η διαδικασία επεμβαίνει ο ανθρώπινος παράγοντας με καλή και δημιουργική διάθεση.

..
   Ίσως ένας αλγόριθμος reinforcement learning ο οποίος να συνδυάζει όλες τις διαστάσεις και να δίνει μια τελιή προτεραιότητα.
   Το feedback θα έρχεται από τους χρήστες, και από τους διαχειριστές



Κάποιοι ορισμοί:

  #. **Επείγον** είναι οτιδήποτε σχετίζεται με μια κατάσταση κατά την οποία η αξία το Οργανισμού μειώνεται ραγδαία. Παράδειγμα: πυρκαγιά, πλυμμήρα, κυβερνοεπίθεση, βλάβη κρίσιμου διακομιστή, κάποια άμεση απαίτηση από το βαθύ κράτος, κλπ
  #. **Διοίκηση** του Τμήματος είναι οι γραμματείες και ο πρόεδρος.
  #. Ο αδόκιμος ξενικός όρος **ticket**, χρησιμοποιείται στο εξής για "ηλεκτρονικά αιτήματα", "εργασίες", κλπ.
  #. Αντίστοιχα, ο όρος **requester**, χρησιμοποιείται για τον "αιτούμενο" ή για αυτόν που εισάγει μια εργασία προς διεκπεραίωση.
  #. Με τον όρο **followup**, εννοούμε τόσο την καταγραφή ενός ενδιάμεσου σταδίου διεκπεραίωσης ενός ticket, όσο και ένα ενημερωτικό μήνυμα από/προς τον requester.


Προτεραιότητες
-----------------

Η προτεραιοποίηση εργασιών, εν γένει είναι ζήτημα περίπλοκο και πολυδιάστατο
και οι συνιστώσες του είναι συχνά αντικρουόμενες.


Διάσταση Α: Οι βασικές προτεραιότητες
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

 0. Επείγοντα.
 #. Αιτήματα Διοίκησης.
 #. Εργασίες Διαχείρισης Συστημάτων.
 #. Εργασίες που αφορούν μαθήματα. 
 #. Αιτήματα επισκεπτών.
 #. Αιτήματα ακαδημαϊκού και διοικητικού/τεχνικού Προσωπικού.
 #. Αιτήματα φοιτητών.


Διάσταση Β: :math:`+\infty > 1`
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Ό,τι αφορά σε πολλούς είναι σημαντικότερο από ό,τι αφορά σε έναν.


Διάσταση Γ: Όχι στην πείνα των μικρών
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Μικρά αιτήματα πρέπει να εξυπηρετούνται σε ανάλογα μικρό χρόνο.
Αλλιώς, είναι άδικο και --σωστά-- αυξάνει πολύ η δυσαρέσκεια
και τότε πολλά μικρά και ασήμαντα μετατρέπονται σε επείγοντα
(δηλ. ραγδαία μείωση αξίας οργανισμού).

Π.χ.: μια προσθήκη σε μια mailing list δεν πρέπει να περιμένει
το ticket της "μελέτης και ανάπτυξης database server"
που θα πάρει μήνες.


Διάσταση Δ: FIFO
^^^^^^^^^^^^^^^^^^^^^

Τα αιτήματα πρέπει να διεκπεραιώνονται με τη σειρά τους.
Δηλαδή, ανάμεσα σε αιτήματα ίσης προτεραιότητας , τα παλιότερα προηγούνται των νεότερων.

Διάσταση Ε: Χρόνος
^^^^^^^^^^^^^^^^^^^^^^

#. Η προτεραιότητα αιτημάτων με σκληρές προθεσμίες, αυξάνει σημαντικά καθώς πλησιάζει το deadline.
#. Η προτεραιότητα κάθε αιτήματος αυξάνει με την απόσταση από τον χρόνο υποβολής του αιτήματος.



Μέθοδος Εργασίας
---------------------

Τα δύο βασικά στοιχεία περιεχομένου ενός ticket, πέρα από τον τίτλο του,
είναι η περιγραφή του και τα followup. Η περιγραφή καθορίζεται από τον
requester κατά τη δημιουργία του ticket. Ένα followup είναι είτε ένα
ενημερωτικό μήνυμα από ή προς τον requester ή μια καταγραφή με χρήσιμη
πληροφορία για κάποιον μελλοντικό αναγνώστη του ticket --π.χ. έναν
τεχνικό που προσπαθεί να λύσει ένα παρόμοιο πρόβλημα.

Τα followup επικοινωνούνται με email τόσο στον requester όσο και
στον τεχνικό στον οποίο έχει ανατεθεί το ticket. Επομένως, δεν
πρέπει να είναι ούτε πολλά, ούτε λίγα, αλλά ακριβώς όσα χρειάζονται
για να μην υπάρχει πληροφοριακός θόρυβος.

Χρησιμοποιούμε τρεις καταστάσεις ενός ticket:

  * **New**: Μόλις δημουργηθεί ένα ticket τίθεται στην κατάσταση New.
  * **Processing**: Μόλις γίνει ανάθεση σε έναν τεχνικό, τίθεται στην κατάσταση Processing.
  * **Closed**: Μόλις ολοκληρωθεί η διεκπεραίωσή του, τίθεται σε κατάσταση Closed.

Η βασική μέθοδος διεκπεραίωσης ενός ticket είναι η εξής απλή:

  A. Δημιουργία ενός ticket από κάποιον requester.
  #. Το ticket ανατίθεται σε τεχνικό και μπαίνει σε κατάσταση Processing. 
  #. Ο Τεχνικός ξεκινά τη διαδικασία επεξεργασίας:
     
     1. αν χρειάζεται, επικοινωνεί με τον requester για τυχόν διευκρινίσεις ή επιπρόσθετες πληροφορίες.
     #. καταγράφει την επικοινωνία σε followup μαζί την όποια χρήσιμη πληροφορία.
     #. εκπονεί μέρος της εργασίας
     #. προσθέτει ένα followup ώστε αφενός να ενημερωθεί ο requester για την πρόοδο του αιτήματός του και αφετέρου να καταγραφεί και ο τρόπος που έγινε η εργασία, τα προβλήματα που αντιμετωπίστηκαν και ο τρόπος λύθηκαν ή παρακάμφθηκαν.
     #. αν το ticket δεν έχει ολοκληρωθεί (ο τεχνικός), ίσως σε δεύτερο χρόνο, επανέρχεται στο πρώτο βήμα της επεξεργασίας.

  #. Το ticket τιθεται σε κατάσταση Closed.
     



.. graphviz::

   digraph TicketProcess {
   open -> assignment;
   /*requester -> open;*/

   /*assignment -> technician;   */
   /*technician -> work;
   technician -> requester [dir="both"];*/
   assignment -> work;
       
   subgraph cluster {
       color=blue;
       /*label = "Process";*/
       work -> followup;
       followup -> while;
       while -> work [label="No"];
   }

   while->close [label="Yes"];
   /*requester -> followup [dir="both"];*/
   /* followup -> requester;*/

   
   
   
   open [shape=oval, label="ticket open"];
   close [shape=oval];
   while [shape=diamond; label="ticket\n done?"];
   work  [shape=rectangle];
   followup [shape=note];
   /* requester [shape=underline, pos="-10,-10!"];
   technician [shape=underline]; */
   }
